
user  root root;
worker_processes  1;

error_log <%= node[:nginx_v2][:log_home] %>/nginx_router_error.log warn;
pid        /var/run/nginx_router.pid;

events {
    worker_connections  <%= node[:nginx_v2][:worker_connections] %>;
    use epoll;
    # multi_accept on;
}

http {
  ssl_protocols  TLSv1;  # don.t use SSLv3 ref: POODLE 
  include       mime.types;
  default_type  text/html;
  server_tokens off;

  log_format main  '$host - [$time_local] '
                   '"$request" $status $bytes_sent '
                   '"$http_referer" "$http_user_agent" '
                   '$remote_addr response_time:$upstream_response_time app_id:$app_id';

  access_log   <%= node[:nginx_v2][:log_home] %>/nginx_router_main_access.log main;

  sendfile             on;
  tcp_nopush           on;
  tcp_nodelay          on;

  keepalive_timeout  75 20;

  gzip                 on;
  gzip_min_length      1250;
  gzip_buffers         16 8k;
  gzip_comp_level      2;
  gzip_proxied         any;
  gzip_types           text/plain text/css application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary            on;
  gzip_disable         "MSIE [1-6]\.(?!.*SV1)";

  client_max_body_size 1024M;

  lua_package_path "<%= node[:lua][:module_path] %>/?.lua;;";
  lua_package_cpath "<%= node[:lua][:module_path] %>/?.so;;";

  upstream router_status {
    server <%= node[:nginx_v2][:uls_ip] %>:<%= node[:nginx_v2][:uls_port] %>;
  }

  server {
      listen       8002;
      client_max_body_size 1024M;
    
      location / {
        access_log   /home/ubuntu/cloudfoundry/.deployments/intalio_devbox/log/nginx/nginx_router_admin_app_access.log;
        proxy_set_header            X-Use-Port 8002;
        proxy_set_header            X-Auth-Port 8001;
        proxy_set_header            X-CDN-Port 8003;
        proxy_set_header            X-HTTP-HOST $http_host;
          
        set $app_id 3;
        proxy_pass http://admin.intalio.local;
        
      }
  }
  
  server {
      listen       8000;
    
      location / {
        access_log   /home/ubuntu/cloudfoundry/.deployments/intalio_devbox/log/nginx/nginx_router_intalio_app_access.log;
        proxy_set_header            X-Local-Port 8000;
        proxy_set_header            X-Auth-Port 8001;
        proxy_set_header            X-HTTP-HOST $http_host;
        proxy_connect_timeout       40;
        proxy_send_timeout          480;
        proxy_read_timeout          480;
                  
        set $app_id 1;
        proxy_pass http://intalio.local;
        
      }
  }  

  server {
      listen       8001;

      location / {
          access_log   /home/ubuntu/cloudfoundry/.deployments/intalio_devbox/log/nginx/nginx_router_oauth_app_access.log;
          proxy_set_header            X-CDN-Port 8003;
          proxy_set_header            X-HTTP-HOST $http_host;
                
          set $app_id 2;
          proxy_pass http://oauth.intalio.local;
      }

  }
  
  server {
      listen       8003;

      location / {
          access_log   /home/ubuntu/cloudfoundry/.deployments/intalio_devbox/log/nginx/nginx_router_cdn_app_access.log;
          set $app_id 4;
          proxy_pass http://cdn.intalio.local;
      }

  }

<% if node[:nginx][:ssl][:only_ssl] %>
    server {
       listen         80;
       rewrite        ^ https://$host$request_uri? permanent;
    }
<% else %>

  server {
    # use chunkin-http
    chunkin on;
    error_page 411 = @my_411_error;
    location @my_411_error {
      chunkin_resume;
    }
    # end of http-chunkin

    listen       80;
    client_max_body_size 1024M;
    server_name  _;
    server_name_in_redirect off;

    #TODO: how to make this internal location totally transparent to outside
    location = /vcapuls {
      internal;
      # We should use rewrite_by_lua to scrub subrequest headers
      # as uls doesn't care those headers at all.
      # Given there are some exceptions to clear some headers,
      # we just leave them as is.

      keepalive_requests 200;
      proxy_pass http://127.0.0.1:8081/;
      # Don't use unix sockets.
      # See https://groups.google.com/a/cloudfoundry.org/forum/?fromgroups=#!topic/vcap-dev/UbcRVnmN4jw
      #proxy_pass http://unix:/tmp/router.sock:/;
    }
    location /nginx {
        autoindex    on;
        root   /var/www;
        expires     max;
    }
    # Make sure there is a /var/www/nginx/404/404.html page
    error_page  404 /nginx/404/404.html;


    location / {
      access_log   <%= node[:nginx_v2][:log_home] %>/nginx_router_access.log main;
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real_IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header            X-Forwarded-Proto http;
      proxy_redirect              off;
      proxy_connect_timeout       <%= node[:nginx][:proxy_connect_timeout] %>;
      proxy_send_timeout          <%= node[:nginx][:proxy_send_timeout] %>;
      proxy_read_timeout          <%= node[:nginx][:proxy_read_timeout] %>;

      set $health_monitor '';
      set $app_id 0;
      if ($http_user_agent = "HTTP-Monitor/1.1") {
        set $health_monitor T;
      }
      if ($http_host = "") {
        set $health_monitor "${health_monitor}T";
      }
      if ($health_monitor = TT) {
        # Trigger a subrequest to sync the latest few stats of the worker to uls,
        # if we have multiple workers, there will be still few stats not synced for
        # the workers which don't get this monitor request.
        access_by_lua '
          local uls = require ("uls")

          ngx.log(ngx.DEBUG, "monitor trigger stats syncup")

          local req = uls.generate_stats_request()

          -- generate one subrequest to uls to update stats
          ngx.location.capture(
            "/vcapuls", { body = req }
          )
        ';

        more_set_input_headers "Authorization: Basic <%= Base64.encode64("#{node[:nginx_v2][:status_user]}:#{node[:nginx_v2][:status_passwd]}").strip %>";
        rewrite ^.*$ /healthz break;
        proxy_pass                 http://router_status;
      }

      # We intend to have one "if" block to avoid the above monitor location
      # to twist with below upstream locator server handling.
      # ("if" block effectively creates a nested location and will inherit
      # all the rewrite/access phase handlers of outer location)
      if ($health_monitor != TT) {
        # The following variables are used by lua module code.
        # DO NOT remove or rename any of them!
        set $backend_addr ''; # Backend server address returned from uls for this request
        set $uls_req_tags ''; # Request tags returned from uls for this request to catalog statistics
        set $router_ip '';
        set $timestamp 0;
        set $trace '';
        set $sticky '';

        access_by_lua '
          local uls = require ("uls")

          uls.pre_process_subrequest(ngx, "<%= node[:router_v2][:trace_key] %>")

          local req = uls.generate_uls_request(ngx)

          -- generate one subrequest to uls for querying
          local res = ngx.location.capture(
            "/vcapuls", { body = req }
          )

          uls.post_process_subrequest(ngx, res)
        ';

        proxy_pass http://$backend_addr;

        # Handling response from backend servers
        header_filter_by_lua '
          local uls = require ("uls")

          uls.post_process_response(ngx)
        ';
      }
    }
  }
<% end %>

  server {
    # use chunkin-http
    chunkin on;
    error_page 411 = @my_411_error;
    location @my_411_error {
      chunkin_resume;
    }
    # end of http-chunkin

    listen      443;
    ssl         on;
    ssl_certificate <%= node[:nginx][:ssl][:config_dir] %>/<%= node[:nginx][:ssl][:basename] %>.crt;
    ssl_certificate_key <%= node[:nginx][:ssl][:config_dir] %>/<%= node[:nginx][:ssl][:basename] %>.key;
    server_name  _;
    server_name_in_redirect off;

    # Add HSTS settings
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";

    # Forward secrecy settings
    ssl_dhparam  <%= node[:nginx][:ssl][:config_dir] %>/<%= node[:nginx_v2][:dh_params] %>;
    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  10m;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS !RC4";
    
    #TODO: how to make this internal location totally transparent to outside
    location = /vcapuls {
      internal;
      # We should use rewrite_by_lua to scrub subrequest headers
      # as uls doesn't care those headers at all.
      # Given there are some exceptions to clear some headers,
      # we just leave them as is.

      proxy_pass http://unix:/tmp/router.sock:/;
    }

    location /nginx {
        autoindex    on;
        root   /var/www;
        expires     max;
    }
    # Make sure there is a /var/www/nginx/404/404.html page
    error_page  404 /nginx/404/404.html;


    location / {
      access_log   <%= node[:nginx_v2][:log_home] %>/nginx_router_access.log main;
      proxy_buffering             off;
      proxy_set_header            Host $host;
      proxy_set_header            X-Real_IP $remote_addr;
      proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header            X-Forwarded-Proto https;
      proxy_redirect              off;
      proxy_connect_timeout       <%= node[:nginx][:proxy_connect_timeout] %>;
      proxy_send_timeout          <%= node[:nginx][:proxy_send_timeout] %>;
      proxy_read_timeout          <%= node[:nginx][:proxy_read_timeout] %>;

      set $health_monitor '';
      set $app_id 0;
      if ($http_user_agent = "HTTP-Monitor/1.1") {
        set $health_monitor T;
      }
      if ($http_host = "") {
        set $health_monitor "${health_monitor}T";
      }
      if ($health_monitor = TT) {
        # Trigger a subrequest to sync the latest few stats of the worker to uls,
        # if we have multiple workers, there will be still few stats not synced for
        # the workers which don't get this monitor request.
        access_by_lua '
          local uls = require ("uls")

          ngx.log(ngx.DEBUG, "monitor trigger stats syncup")

          local req = uls.generate_stats_request()

          -- generate one subrequest to uls to update stats
          ngx.location.capture(
            "/vcapuls", { body = req }
          )
        ';

        more_set_input_headers "Authorization: Basic <%= Base64.encode64("#{node[:nginx_v2][:status_user]}:#{node[:nginx_v2][:status_passwd]}").strip %>";
        rewrite ^.*$ /healthz break;
        proxy_pass                 http://router_status;
      }

      # We intend to have one "if" block to avoid the above monitor location
      # to twist with below upstream locator server handling.
      # ("if" block effectively creates a nested location and will inherit
      # all the rewrite/access phase handlers of outer location)
      if ($health_monitor != TT) {
        # The following variables are used by lua module code.
        # DO NOT remove or rename any of them!
        set $backend_addr ''; # Backend server address returned from uls for this request
        set $uls_req_tags ''; # Request tags returned from uls for this request to catalog statistics
        set $router_ip '';
        set $timestamp 0;
        set $trace '';
        set $sticky '';

        access_by_lua '
          local uls = require ("uls")

          uls.pre_process_subrequest(ngx, "<%= node[:router_v2][:trace_key] %>")

          local req = uls.generate_uls_request(ngx)

          -- generate one subrequest to uls for querying
          local res = ngx.location.capture(
            "/vcapuls", { body = req }
          )

          uls.post_process_subrequest(ngx, res)
        ';

        proxy_pass http://$backend_addr;

        # Handling response from backend servers
        header_filter_by_lua '
          local uls = require ("uls")

          uls.post_process_response(ngx)
        ';
      }
    }
  }

}
